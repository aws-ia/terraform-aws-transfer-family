resource "aws_guardduty_malware_protection_plan" "this" {
  role = aws_iam_role.guardduty_role.arn

  protected_resource {
    s3_bucket {
      bucket_name     = var.s3_ingest_bucket.bucket_name
      object_prefixes = var.s3_ingest_bucket.object_prefixes
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }
}

resource "aws_iam_role" "guardduty_role" {
  name               = "${var.name_prefix}-guardduty-role"
  assume_role_policy = data.aws_iam_policy_document.trust_policy.json
}

resource "aws_iam_role_policy_attachment" "guardduty_policy" {
  role       = aws_iam_role.guardduty_role.name
  policy_arn = aws_iam_policy.guardduty_policy.arn
}

resource "aws_iam_policy" "guardduty_policy" {
  name   = "${var.name_prefix}-guardduty-policy"
  policy = data.aws_iam_policy_document.permissions.json
}

# SQS queue for buffering EventBridge events (optional)
resource "aws_sqs_queue" "guardduty_events" {
  count = var.enable_sqs_buffer ? 1 : 0

  name                       = "${var.name_prefix}-guardduty-events"
  message_retention_seconds  = 1209600 # 14 days
  visibility_timeout_seconds = 300     # 5 minutes
  kms_master_key_id         = var.create_kms_key_for_lambda_sqs ? aws_kms_key.lambda_env[0].arn : "alias/aws/sqs"

  redrive_policy = var.create_sqs_dlq ? jsonencode({
    deadLetterTargetArn = aws_sqs_queue.dlq[0].arn
    maxReceiveCount     = 3
  }) : null

  tags = var.tags
}

# EventBridge rule for all GuardDuty malware scan results
resource "aws_cloudwatch_event_rule" "guardduty_scan_results" {
  name = "${var.name_prefix}-guardduty-scan-results"

  event_pattern = jsonencode({
    source      = ["aws.guardduty"]
    detail-type = ["GuardDuty Malware Protection Object Scan Result"]
    detail = {
      scanResultDetails = {
        scanResultStatus = keys(var.routing_config)
      }
    }
  })
}

# EventBridge target -> SQS queue (when SQS buffer enabled)
resource "aws_cloudwatch_event_target" "sqs_target" {
  count = var.enable_sqs_buffer ? 1 : 0

  rule      = aws_cloudwatch_event_rule.guardduty_scan_results.name
  target_id = "GuardDutySQSTarget"
  arn       = aws_sqs_queue.guardduty_events[count.index].arn
}

# EventBridge target -> Lambda directly (when SQS buffer disabled)
resource "aws_cloudwatch_event_target" "lambda_target" {
  count = var.enable_sqs_buffer ? 0 : 1

  rule      = aws_cloudwatch_event_rule.guardduty_scan_results.name
  target_id = "GuardDutyLambdaTarget"
  arn       = aws_lambda_function.quarantine_function.arn
}

# Lambda event source mapping from SQS (when SQS buffer enabled)
resource "aws_lambda_event_source_mapping" "sqs_trigger" {
  count = var.enable_sqs_buffer ? 1 : 0

  event_source_arn                   = aws_sqs_queue.guardduty_events[count.index].arn
  function_name                      = aws_lambda_function.quarantine_function.arn
  batch_size                         = 10
  maximum_batching_window_in_seconds = 5
}

# Lambda permission for EventBridge (when SQS buffer disabled)
resource "aws_lambda_permission" "allow_eventbridge" {
  count = var.enable_sqs_buffer ? 0 : 1

  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.quarantine_function.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.guardduty_scan_results.arn
}

# SQS queue policy to allow EventBridge to send messages
resource "aws_sqs_queue_policy" "guardduty_events_policy" {
  count = var.enable_sqs_buffer ? 1 : 0

  queue_url = aws_sqs_queue.guardduty_events[count.index].id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "events.amazonaws.com"
        }
        Action   = "sqs:SendMessage"
        Resource = aws_sqs_queue.guardduty_events[count.index].arn
        Condition = {
          ArnEquals = {
            "aws:SourceArn" = aws_cloudwatch_event_rule.guardduty_scan_results.arn
          }
        }
      }
    ]
  })
}

data "archive_file" "lambda_zip" {
  type        = "zip"
  source_file = "${path.module}/lambda_function.py"
  output_path = "${path.module}/lambda_function.zip"
}

resource "aws_kms_key" "lambda_env" {
  count = var.create_kms_key_for_lambda_sqs ? 1 : 0

  description         = "KMS key for Lambda environment variable encryption"
  enable_key_rotation = true
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid    = "Enable IAM User Permissions"
        Effect = "Allow"
        Principal = {
          AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"
        }
        Action   = "kms:*"
        Resource = "*"
      },
      {
        Sid    = "Allow Lambda service"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
        Action = [
          "kms:Decrypt",
          "kms:DescribeKey"
        ]
        Resource = "*"
      }
    ]
  })
}

resource "aws_kms_alias" "lambda_env" {
  count = var.create_kms_key_for_lambda_sqs ? 1 : 0

  name          = "alias/${var.name_prefix}-lambda-env"
  target_key_id = aws_kms_key.lambda_env[0].key_id
}

resource "aws_sqs_queue" "dlq" {
  count = var.create_sqs_dlq ? 1 : 0

  name                              = "${var.name_prefix}-lambda-dlq"
  kms_master_key_id                 = var.create_kms_key_for_lambda_sqs ? aws_kms_key.lambda_env[0].arn : null
  kms_data_key_reuse_period_seconds = var.create_kms_key_for_lambda_sqs ? 300 : null
}

resource "aws_lambda_function" "quarantine_function" {
  filename                       = data.archive_file.lambda_zip.output_path
  function_name                  = "${var.name_prefix}-quarantine-function"
  role                           = aws_iam_role.lambda_role.arn
  handler                        = "lambda_function.handler"
  runtime                        = "python3.9"
  source_code_hash               = data.archive_file.lambda_zip.output_base64sha256
  timeout                        = 60
  reserved_concurrent_executions = 10

  environment {
    variables = {
      ROUTING_CONFIG = jsonencode(var.routing_config)
      DELETE_FROM_SOURCE = tostring(var.delete_processed_file_from_ingest_bucket)
    }
  }

  kms_key_arn = var.create_kms_key_for_lambda_sqs ? aws_kms_key.lambda_env[0].arn : null

  dynamic "dead_letter_config" {
    for_each = var.create_sqs_dlq ? [1] : []
    content {
      target_arn = aws_sqs_queue.dlq[0].arn
    }
  }

  tracing_config {
    mode = "Active"
  }

  vpc_config {
    subnet_ids         = var.vpc_subnet_ids != null ? var.vpc_subnet_ids : []
    security_group_ids = var.vpc_security_group_ids != null ? var.vpc_security_group_ids : []
  }

  code_signing_config_arn = var.code_signing_config_arn
}

resource "aws_iam_role" "lambda_role" {
  name = "${var.name_prefix}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy" "lambda_policy" {
  name = "${var.name_prefix}-lambda-policy"
  role = aws_iam_role.lambda_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = concat([
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:*:*:*"
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:DeleteObject",
          "s3:PutObject",
          "s3:PutObjectTagging"
        ]
        Resource = concat([
          "arn:aws:s3:::${var.s3_ingest_bucket.bucket_name}/*"
          ], [
          for dest_path in values(var.routing_config) :
          "arn:aws:s3:::${split("/", dest_path)[0]}/*"
          if dest_path != null
        ])
      },
      {
        Effect = "Allow"
        Action = [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ]
        Resource = var.buckets_kms_key_arn != null ? [var.buckets_kms_key_arn] : []
      },
      {
        Effect = "Allow"
        Action = [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords"
        ]
        Resource = "*"
      }
      ], var.enable_sqs_buffer ? [{
        Effect = "Allow"
        Action = [
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage",
          "sqs:GetQueueAttributes"
        ]
        Resource = aws_sqs_queue.guardduty_events[0].arn
        }] : [], var.create_sqs_dlq ? [{
        Effect = "Allow"
        Action = [
          "sqs:SendMessage"
        ]
        Resource = aws_sqs_queue.dlq[0].arn
    }] : [])
  })
}
