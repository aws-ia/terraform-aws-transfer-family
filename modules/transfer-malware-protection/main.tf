resource "aws_guardduty_malware_protection_plan" "this" {
  role = aws_iam_role.guardduty_role.arn

  protected_resource {
    s3_bucket {
      bucket_name     = var.s3_bucket_name
      object_prefixes = var.object_prefixes
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }
}

resource "aws_iam_role" "guardduty_role" {
  name               = "${var.name_prefix}-guardduty-role"
  assume_role_policy = data.aws_iam_policy_document.trust_policy.json
}

resource "aws_iam_role_policy_attachment" "guardduty_policy" {
  role       = aws_iam_role.guardduty_role.name
  policy_arn = aws_iam_policy.guardduty_policy.arn
}

resource "aws_iam_policy" "guardduty_policy" {
  name   = "${var.name_prefix}-guardduty-policy"
  policy = data.aws_iam_policy_document.permissions.json
}

# EventBridge rule for malware detection
resource "aws_cloudwatch_event_rule" "malware_detection" {
  name = "${var.name_prefix}-malware-detection"

  event_pattern = jsonencode({
    source      = ["aws.guardduty"]
    detail-type = ["GuardDuty Finding"]
    detail = {
      type = ["Object:S3/MaliciousFile"]
      service = {
        featureName = ["S3MalwareProtection"]
      }
    }
  })
}

resource "aws_cloudwatch_event_target" "lambda_target" {
  rule      = aws_cloudwatch_event_rule.malware_detection.name
  target_id = "QuarantineLambdaTarget"
  arn       = aws_lambda_function.quarantine_function.arn
}

resource "aws_lambda_permission" "allow_eventbridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.quarantine_function.function_name
  principal     = "events.amazonaws.com"
  source_arn    = aws_cloudwatch_event_rule.malware_detection.arn
}

data "archive_file" "lambda_zip" {
  type        = "zip"
  source_file = "${path.module}/lambda_function.py"
  output_path = "${path.module}/lambda_function.zip"
}

resource "aws_lambda_function" "quarantine_function" {
  filename         = data.archive_file.lambda_zip.output_path
  function_name    = "${var.name_prefix}-quarantine-function"
  role            = aws_iam_role.lambda_role.arn
  handler         = "lambda_function.handler"
  runtime         = "python3.9"
  source_code_hash = data.archive_file.lambda_zip.output_base64sha256

  environment {
    variables = {
      QUARANTINE_BUCKET = var.quarantine_bucket_name
    }
  }
}

resource "aws_iam_role" "lambda_role" {
  name = "${var.name_prefix}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy" "lambda_policy" {
  name = "${var.name_prefix}-lambda-policy"
  role = aws_iam_role.lambda_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:*:*:*"
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:DeleteObject",
          "s3:PutObject",
          "s3:PutObjectTagging"
        ]
        Resource = [
          "arn:aws:s3:::${var.s3_bucket_name}/*",
          "arn:aws:s3:::${var.quarantine_bucket_name}/*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "kms:Decrypt",
          "kms:GenerateDataKey"
        ]
        Resource = var.kms_key_arn != null ? [var.kms_key_arn] : []
      }
    ]
  })
}
