import json
import boto3
import os

s3 = boto3.client('s3')

def load_routing_config():
    """Load routing configuration from environment variable"""
    routing_json = os.environ.get('ROUTING_CONFIG', '{}')
    return json.loads(routing_json)

def extract_s3_details(detail):
    """Extract S3 details from GuardDuty scan event"""
    s3_details = detail.get('s3ObjectDetails', {})
    source_bucket = s3_details.get('bucketName')
    object_key = s3_details.get('objectKey')
    return source_bucket, object_key

def process_file(source_bucket, object_key, dest_path, scan_status):
    """Process file by moving it to destination path"""
    if not dest_path:
        print(f"No destination path configured for {scan_status}, skipping")
        return
        
    print(f"Processing {scan_status} file: {object_key} from {source_bucket} to {dest_path}")
    
    if '/' in dest_path:
        dest_bucket_name, dest_prefix = dest_path.split('/', 1)
        dest_key = f"{dest_prefix}/{object_key}"
    else:
        dest_bucket_name = dest_path
        dest_key = object_key
    
    copy_source = {'Bucket': source_bucket, 'Key': object_key}
    s3.copy_object(CopySource=copy_source, Bucket=dest_bucket_name, Key=dest_key)
    
    print(f"Successfully processed {object_key} to {dest_bucket_name}/{dest_key}")
    
    # Delete from source if enabled
    if os.environ.get('DELETE_FROM_SOURCE') == 'true':
        s3.delete_object(Bucket=source_bucket, Key=object_key)
        print(f"Deleted {object_key} from {source_bucket}")

def handler(event, context):
    routing_config = load_routing_config()
    
    try:
        # Handle SQS events (when SQS buffer is enabled)
        if 'Records' in event:
            for record in event['Records']:
                # Parse the EventBridge event from SQS message body
                eventbridge_event = json.loads(record['body'])
                process_guardduty_event(eventbridge_event, routing_config)
        else:
            # Handle direct EventBridge events (when SQS buffer is disabled)
            process_guardduty_event(event, routing_config)
    
    except Exception as e:
        print(f"Error processing event: {str(e)}")
        raise e
    
    return {'statusCode': 200}

def process_guardduty_event(event, routing_config):
    """Process a single GuardDuty event"""
    detail = event['detail']
    
    # Handle GuardDuty Malware Protection Object Scan Result events
    if event.get('detail-type') == 'GuardDuty Malware Protection Object Scan Result':
        scan_status = detail.get('scanResultDetails', {}).get('scanResultStatus')
        source_bucket, object_key = extract_s3_details(detail)
        
        #looping through all scan_status
        if scan_status in routing_config:
            dest_path = routing_config[scan_status]
            process_file(source_bucket, object_key, dest_path, scan_status)
            print(f"Successfully processed {scan_status} file: {object_key} has been copied from {source_bucket} to {dest_path}")
        else:
            print(f"No routing configured for scan status: {scan_status}. The files will stay in the {source_bucket} bucket") 
    else:
        print(f"Ignoring event: {event.get('detail-type')}")
