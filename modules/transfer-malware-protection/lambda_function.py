import json
import boto3
import os
from datetime import datetime

s3 = boto3.client('s3')

def handler(event, context):
    quarantine_bucket = os.environ['QUARANTINE_BUCKET']
    
    # Extract S3 object details from GuardDuty Finding event
    detail = event['detail']
    
    # Check if this is a malware finding
    if detail.get('type') == 'Object:S3/MaliciousFile':
        try:
            # Get S3 object details from the finding
            s3_bucket_details = detail['resource']['s3BucketDetails'][0]
            source_bucket = s3_bucket_details['name']
            
            # Get the object key from S3ObjectDetails
            s3_object_details = s3_bucket_details['s3ObjectDetails'][0]
            object_key = s3_object_details['key']
            
            print(f"Processing malware file: {object_key} from bucket: {source_bucket}")
            
            # Copy infected file to quarantine bucket
            copy_source = {'Bucket': source_bucket, 'Key': object_key}
            quarantine_key = f"quarantine/{datetime.now().strftime('%Y/%m/%d')}/{object_key}"
            
            # Get threat name and sanitize it for S3 tags
            threat_name = detail.get("service", {}).get("malwareScanDetails", {}).get("threats", [{}])[0].get("name", "Unknown")
            # Replace problematic characters with safe ones
            safe_threat_name = threat_name.replace(" ", "_").replace("(", "").replace(")", "").replace("-", "_")
            quarantine_date = datetime.now().strftime('%Y_%m_%d_%H_%M_%S')  # Use safe format
            
            s3.copy_object(
                CopySource=copy_source,
                Bucket=quarantine_bucket,
                Key=quarantine_key,
                TaggingDirective='REPLACE',
                Tagging=f'Status=QUARANTINED&OriginalBucket={source_bucket}&QuarantineDate={quarantine_date}&ThreatName={safe_threat_name}'
            )
            
            # Delete from original bucket
            s3.delete_object(Bucket=source_bucket, Key=object_key)
            
            print(f"Successfully quarantined {object_key} from {source_bucket} to {quarantine_bucket}")
            
        except Exception as e:
            print(f"Error quarantining {object_key}: {str(e)}")
            raise e
    else:
        print(f"Ignoring non-malware finding: {detail.get('type')}")
    
    return {'statusCode': 200}
