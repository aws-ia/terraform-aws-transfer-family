import json
import boto3
import os
from datetime import datetime

s3 = boto3.client('s3')

def handler(event, context):
    quarantine_bucket = os.environ['QUARANTINE_BUCKET']
    clean_bucket = os.environ.get('CLEAN_BUCKET', '')
    
    # Extract details from event
    detail = event['detail']
    
    # Handle GuardDuty Finding events (malware) - keeping for backward compatibility
    if event.get('detail-type') == 'GuardDuty Finding' and detail.get('type') == 'Object:S3/MaliciousFile':
        try:
            # Get S3 object details from the finding
            s3_bucket_details = detail['resource']['s3BucketDetails'][0]
            source_bucket = s3_bucket_details['name']
            
            # Get the object key from S3ObjectDetails
            s3_object_details = s3_bucket_details['s3ObjectDetails'][0]
            object_key = s3_object_details['key']
            
            print(f"Processing malware file: {object_key} from bucket: {source_bucket}")
            
            # Parse quarantine bucket and prefix
            if '/' in quarantine_bucket:
                quarantine_bucket_name, quarantine_prefix = quarantine_bucket.split('/', 1)
                quarantine_key = f"{quarantine_prefix}/quarantine/{datetime.now().strftime('%Y/%m/%d')}/{object_key}"
            else:
                quarantine_bucket_name = quarantine_bucket
                quarantine_key = f"quarantine/{datetime.now().strftime('%Y/%m/%d')}/{object_key}"
            
            # Copy infected file to quarantine bucket
            copy_source = {'Bucket': source_bucket, 'Key': object_key}
            
            # Get threat name and sanitize it for S3 tags
            threat_name = detail.get("service", {}).get("malwareScanDetails", {}).get("threats", [{}])[0].get("name", "Unknown")
            # Replace problematic characters with safe ones
            safe_threat_name = threat_name.replace(" ", "_").replace("(", "").replace(")", "").replace("-", "_")
            quarantine_date = datetime.now().strftime('%Y_%m_%d_%H_%M_%S')  # Use safe format
            
            s3.copy_object(
                CopySource=copy_source,
                Bucket=quarantine_bucket_name,
                Key=quarantine_key,
                TaggingDirective='REPLACE',
                Tagging=f'Status=QUARANTINED&OriginalBucket={source_bucket}&QuarantineDate={quarantine_date}&ThreatName={safe_threat_name}'
            )
            
            # Delete from original bucket - uncomment the line below if you want to delete the original file
            # s3.delete_object(Bucket=source_bucket, Key=object_key)
            
            print(f"Successfully quarantined {object_key} from {source_bucket} to {quarantine_bucket_name}/{quarantine_key}")
            
        except Exception as e:
            print(f"Error quarantining {object_key}: {str(e)}")
            raise e
    
    # Handle GuardDuty Malware Protection Object Scan Result events (malware)
    elif event.get('detail-type') == 'GuardDuty Malware Protection Object Scan Result' and detail.get('scanResultDetails', {}).get('scanResultStatus') == 'THREATS_FOUND':
        try:
            # Get S3 object details from GuardDuty scan event
            s3_details = detail.get('s3ObjectDetails', {})
            source_bucket = s3_details.get('bucketName')
            object_key = s3_details.get('objectKey')
            
            print(f"Processing malware file: {object_key} from bucket: {source_bucket}")
            
            # Parse quarantine bucket and prefix
            if '/' in quarantine_bucket:
                quarantine_bucket_name, quarantine_prefix = quarantine_bucket.split('/', 1)
                quarantine_key = f"{quarantine_prefix}/quarantine/{datetime.now().strftime('%Y/%m/%d')}/{object_key}"
            else:
                quarantine_bucket_name = quarantine_bucket
                quarantine_key = f"quarantine/{datetime.now().strftime('%Y/%m/%d')}/{object_key}"
            
            # Copy infected file to quarantine bucket
            copy_source = {'Bucket': source_bucket, 'Key': object_key}
            
            # Get threat name from the new schema
            threats = detail.get('scanResultDetails', {}).get('threats', [])
            threat_name = threats[0].get('name', 'Unknown') if threats else 'Unknown'
            # Replace problematic characters with safe ones
            safe_threat_name = threat_name.replace(" ", "_").replace("(", "").replace(")", "").replace("-", "_")
            quarantine_date = datetime.now().strftime('%Y_%m_%d_%H_%M_%S')
            
            s3.copy_object(
                CopySource=copy_source,
                Bucket=quarantine_bucket_name,
                Key=quarantine_key,
                TaggingDirective='REPLACE',
                Tagging=f'Status=QUARANTINED&OriginalBucket={source_bucket}&QuarantineDate={quarantine_date}&ThreatName={safe_threat_name}'
            )
            
            # Delete from original bucket - uncomment the line below if you want to delete the original file
            # s3.delete_object(Bucket=source_bucket, Key=object_key)
            
            print(f"Successfully quarantined {object_key} from {source_bucket} to {quarantine_bucket_name}/{quarantine_key}")
            
        except Exception as e:
            print(f"Error quarantining {object_key}: {str(e)}")
            raise e
    
    # Handle GuardDuty Malware Protection Object Scan Result events (clean files)
    elif event.get('detail-type') == 'GuardDuty Malware Protection Object Scan Result' and detail.get('scanResultDetails', {}).get('scanResultStatus') == 'NO_THREATS_FOUND':
        if clean_bucket:
            try:
                # Get S3 object details from GuardDuty scan event
                s3_details = detail.get('s3ObjectDetails', {})
                source_bucket = s3_details.get('bucketName')
                object_key = s3_details.get('objectKey')
                
                print(f"Processing clean file: {object_key} from bucket: {source_bucket}")
                
                # Parse clean bucket and prefix
                if '/' in clean_bucket:
                    clean_bucket_name, clean_prefix = clean_bucket.split('/', 1)
                    clean_key = f"{clean_prefix}/clean/{datetime.now().strftime('%Y/%m/%d')}/{object_key}"
                else:
                    clean_bucket_name = clean_bucket
                    clean_key = f"clean/{datetime.now().strftime('%Y/%m/%d')}/{object_key}"
                
                # Copy clean file to clean bucket
                copy_source = {'Bucket': source_bucket, 'Key': object_key}
                scan_date = datetime.now().strftime('%Y_%m_%d_%H_%M_%S')
                
                s3.copy_object(
                    CopySource=copy_source,
                    Bucket=clean_bucket_name,
                    Key=clean_key,
                    TaggingDirective='REPLACE',
                    Tagging=f'Status=CLEAN&OriginalBucket={source_bucket}&ScanDate={scan_date}'
                )
                
                # Delete from original bucket - uncomment the line below if you want to delete the original file
                # s3.delete_object(Bucket=source_bucket, Key=object_key)
                
                print(f"Successfully moved clean file {object_key} from {source_bucket} to {clean_bucket_name}/{clean_key}")
                
            except Exception as e:
                print(f"Error moving clean file {object_key}: {str(e)}")
                raise e
        else:
            print("Clean bucket not configured, skipping clean file processing")
    else:
        print(f"Ignoring event: {event.get('detail-type')} with result: {detail.get('scanResultDetails', {}).get('scanResultStatus', detail.get('type'))}")
    
    return {'statusCode': 200}
