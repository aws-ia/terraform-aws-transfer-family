#####################################################################################
# Terraform module examples are meant to show an _example_ on how to use a module
# per use-case. The code below should not be copied directly but referenced in order
# to build your own root module that invokes this module
#####################################################################################

######################################
# Defaults and Locals
######################################

resource "random_pet" "name" {
  prefix = "aws-ia"
  length = 2
}

locals {
  server_name = "transfer-server-${random_pet.name.id}"
  users       = var.users_file != null ? (fileexists(var.users_file) ? csvdecode(file(var.users_file)) : []) : []
}

data "aws_caller_identity" "current" {}

# SFTP Transfer Server (creates ingest bucket and KMS key)
module "transfer_server" {
  source = "../../"
  
  domain                   = "S3"
  protocols                = ["SFTP"]
  endpoint_type            = "PUBLIC"
  identity_provider        = "SERVICE_MANAGED"
  server_name              = local.server_name
  enable_logging           = true
  log_retention_days       = 14
  tags                     = var.tags
}

# SFTP Users
module "transfer_users" {
  source = "../../modules/transfer-users"
  users  = local.users
  create_test_user = true

  server_id = module.transfer_server.server_id

  s3_bucket_name = module.s3_bucket.s3_bucket_id
  s3_bucket_arn  = module.s3_bucket.s3_bucket_arn

  kms_key_id = aws_kms_key.transfer_family_key.arn
}

# S3 bucket for Transfer Server (ingest bucket)
module "s3_bucket" {
  source                   = "git::https://github.com/terraform-aws-modules/terraform-aws-s3-bucket.git?ref=v5.0.0"
  bucket                   = lower("${random_pet.name.id}-${module.transfer_server.server_id}-s3-sftp")
  control_object_ownership = true
  object_ownership         = "BucketOwnerEnforced"
  block_public_acls        = true
  block_public_policy      = true
  ignore_public_acls       = true
  restrict_public_buckets  = true

  server_side_encryption_configuration = {
    rule = {
      apply_server_side_encryption_by_default = {
        kms_master_key_id = aws_kms_key.transfer_family_key.arn
        sse_algorithm     = "aws:kms"
      }
    }
  }

  versioning = {
    enabled = false
  }
}

# KMS key for Transfer Server
resource "aws_kms_key" "transfer_family_key" {
  description             = "KMS key for encrypting S3 bucket and cloudwatch log group"
  deletion_window_in_days = 7
  enable_key_rotation     = true

  tags = {
    Purpose = "Transfer Family Encryption"
  }
}

resource "aws_kms_alias" "transfer_family_key_alias" {
  name          = "alias/transfer-family-key-${random_pet.name.id}"
  target_key_id = aws_kms_key.transfer_family_key.key_id
}

resource "aws_kms_key_policy" "transfer_family_key_policy" {
  key_id = aws_kms_key.transfer_family_key.id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid    = "Enable Limited Admin Permissions"
        Effect = "Allow"
        Principal = {
          AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"
        }
        Action   = "kms:*"
        Resource = aws_kms_key.transfer_family_key.arn
      },
      {
        Sid    = "Allow CloudWatch Logs"
        Effect = "Allow"
        Principal = {
          Service = "logs.${var.aws_region}.amazonaws.com"
        }
        Action = [
          "kms:Encrypt",
          "kms:Decrypt",
          "kms:ReEncrypt*",
          "kms:GenerateDataKey*",
          "kms:CreateGrant",
          "kms:Describe*"
        ]
        Resource = aws_kms_key.transfer_family_key.arn
        Condition = {
          ArnEquals = {
            "kms:EncryptionContext:aws:logs:arn" = "arn:aws:logs:${var.aws_region}:${data.aws_caller_identity.current.account_id}:*"
          }
        }
      }
    ]
  })
}

resource "aws_s3_bucket" "quarantine" {
  bucket = "${random_pet.name.id}-quarantine"
  tags = merge(var.tags, {
    Purpose = "SFTP Malware Quarantine"
  })
}

resource "aws_s3_bucket" "clean" {
  bucket = "${random_pet.name.id}-clean"
  tags = merge(var.tags, {
    Purpose = "SFTP Clean Files"
  })
}

resource "aws_s3_bucket" "errors" {
  bucket = "${random_pet.name.id}-errors"
  tags = merge(var.tags, {
    Purpose = "SFTP Scan Errors"
  })
}

resource "aws_s3_bucket_server_side_encryption_configuration" "quarantine" {
  bucket = aws_s3_bucket.quarantine.id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = aws_kms_key.transfer_family_key.arn
      sse_algorithm     = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "clean" {
  bucket = aws_s3_bucket.clean.id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = aws_kms_key.transfer_family_key.arn
      sse_algorithm     = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "errors" {
  bucket = aws_s3_bucket.errors.id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = aws_kms_key.transfer_family_key.arn
      sse_algorithm     = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_versioning" "quarantine" {
  bucket = aws_s3_bucket.quarantine.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_versioning" "clean" {
  bucket = aws_s3_bucket.clean.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_versioning" "errors" {
  bucket = aws_s3_bucket.errors.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_public_access_block" "quarantine" {
  bucket = aws_s3_bucket.quarantine.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_public_access_block" "clean" {
  bucket = aws_s3_bucket.clean.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_public_access_block" "errors" {
  bucket = aws_s3_bucket.errors.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

module "guardduty_malware_protection" {
  source = "../../modules/transfer-malware-protection"
  
  name_prefix                              = var.name_prefix
  s3_ingest_bucket = {
    bucket_name     = module.s3_bucket.s3_bucket_id
    object_prefixes = [for user, details in module.transfer_users.user_details : trimsuffix(trimprefix(details.home_directory, "/"), "/")]
  }
  delete_processed_file_from_ingest_bucket = var.delete_processed_file_from_ingest_bucket
  buckets_kms_key_arn                     = aws_kms_key.transfer_family_key.arn
  create_kms_key                          = var.create_kms_key
  create_sqs_dlq                          = var.create_sqs_dlq
  enable_sqs_buffer                       = var.enable_sqs_buffer
  tags                                    = var.tags
  
  routing_config = {
    "NO_THREATS_FOUND" = var.clean_prefix != null ? "${aws_s3_bucket.clean.id}/${var.clean_prefix}" : aws_s3_bucket.clean.id
    "THREATS_FOUND"    = var.quarantine_prefix != null ? "${aws_s3_bucket.quarantine.id}/${var.quarantine_prefix}" : aws_s3_bucket.quarantine.id
    "UNSUPPORTED"      = var.error_prefix != null ? "${aws_s3_bucket.errors.id}/${var.error_prefix}" : aws_s3_bucket.errors.id
    "ACCESS_DENIED"    = var.error_prefix != null ? "${aws_s3_bucket.errors.id}/${var.error_prefix}" : aws_s3_bucket.errors.id
    "FAILED"           = var.error_prefix != null ? "${aws_s3_bucket.errors.id}/${var.error_prefix}" : aws_s3_bucket.errors.id
  }
  
  depends_on = [module.transfer_users]
}
