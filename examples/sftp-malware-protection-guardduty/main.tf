# Complete SFTP server with malware protection example

resource "random_pet" "name" {
  prefix = "aws-ia"
  length = 2
}

locals {
  users = var.users_file != null ? (fileexists(var.users_file) ? csvdecode(file(var.users_file)) : []) : [] # Read users from CSV
}

# First, create the base SFTP infrastructure using the existing example
module "sftp-public-endpoint-service-managed-S3-resources" {
  source = "../sftp-public-endpoint-service-managed-S3"
  
  # Pass through variables to base example
  aws_region = var.aws_region
  users_file = var.users_file
}

# Additional destination buckets for malware scanning results
module "s3_bucket_quarantine" {
  source                   = "git::https://github.com/terraform-aws-modules/terraform-aws-s3-bucket.git?ref=v5.0.0"
  bucket                   = "${random_pet.name.id}-quarantine"
  control_object_ownership = true
  object_ownership         = "BucketOwnerEnforced"
  block_public_acls        = true
  block_public_policy      = true
  ignore_public_acls       = true
  restrict_public_buckets  = true

  server_side_encryption_configuration = {
    rule = {
      apply_server_side_encryption_by_default = {
        sse_algorithm = "AES256"
      }
    }
  }

  versioning = {
    enabled = true
  }

  tags = merge(var.tags, {
    Purpose = "SFTP Malware Quarantine"
  })
}

module "s3_bucket_clean" {
  source                   = "git::https://github.com/terraform-aws-modules/terraform-aws-s3-bucket.git?ref=v5.0.0"
  bucket                   = "${random_pet.name.id}-clean"
  control_object_ownership = true
  object_ownership         = "BucketOwnerEnforced"
  block_public_acls        = true
  block_public_policy      = true
  ignore_public_acls       = true
  restrict_public_buckets  = true

  server_side_encryption_configuration = {
    rule = {
      apply_server_side_encryption_by_default = {
        sse_algorithm = "AES256"
      }
    }
  }

  versioning = {
    enabled = true
  }

  tags = merge(var.tags, {
    Purpose = "SFTP Clean Files"
  })
}

module "s3_bucket_errors" {
  source                   = "git::https://github.com/terraform-aws-modules/terraform-aws-s3-bucket.git?ref=v5.0.0"
  bucket                   = "${random_pet.name.id}-errors"
  control_object_ownership = true
  object_ownership         = "BucketOwnerEnforced"
  block_public_acls        = true
  block_public_policy      = true
  ignore_public_acls       = true
  restrict_public_buckets  = true

  server_side_encryption_configuration = {
    rule = {
      apply_server_side_encryption_by_default = {
        sse_algorithm = "AES256"
      }
    }
  }

  versioning = {
    enabled = true
  }

  tags = merge(var.tags, {
    Purpose = "SFTP Scan Errors"
  })
}

# GuardDuty Malware Protection on top of the base infrastructure (sftp-public-endpoint-service-managed-S3-resources)
module "guardduty_malware_protection" {
  source = "../../modules/transfer-malware-protection"
  
  name_prefix                              = var.name_prefix
  s3_ingest_bucket = {
    bucket_name     = module.sftp-public-endpoint-service-managed-S3-resources.sftp_bucket_name
    object_prefixes = [for user in local.users : trimsuffix(trimprefix(user.home_dir, "/"), "/")]
  }
  delete_processed_file_from_ingest_bucket = var.delete_processed_file_from_ingest_bucket
  ingest_bucket_kms_key_arn                   = module.sftp-public-endpoint-service-managed-S3-resources.kms_key_arn
  create_kms_key_for_lambda_sqs           = var.create_kms_key_for_lambda_sqs
  create_sqs_dlq                          = var.create_sqs_dlq
  enable_sqs_buffer                       = var.enable_sqs_buffer
  tags                                    = var.tags
  
  routing_config = {
    "NO_THREATS_FOUND" = var.clean_prefix != null ? "${module.s3_bucket_clean.s3_bucket_id}/${var.clean_prefix}" : module.s3_bucket_clean.s3_bucket_id
    "THREATS_FOUND"    = var.quarantine_prefix != null ? "${module.s3_bucket_quarantine.s3_bucket_id}/${var.quarantine_prefix}" : module.s3_bucket_quarantine.s3_bucket_id
    "UNSUPPORTED"      = var.error_prefix != null ? "${module.s3_bucket_errors.s3_bucket_id}/${var.error_prefix}" : module.s3_bucket_errors.s3_bucket_id
    "ACCESS_DENIED"    = var.error_prefix != null ? "${module.s3_bucket_errors.s3_bucket_id}/${var.error_prefix}" : module.s3_bucket_errors.s3_bucket_id
    "FAILED"           = var.error_prefix != null ? "${module.s3_bucket_errors.s3_bucket_id}/${var.error_prefix}" : module.s3_bucket_errors.s3_bucket_id
  }
  
  depends_on = [module.sftp-public-endpoint-service-managed-S3-resources]
}
